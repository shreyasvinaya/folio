<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://shreyasvinaya.github.io/folio/feed.xml" rel="self" type="application/atom+xml"/><link href="https://shreyasvinaya.github.io/folio/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-05T19:50:41+00:00</updated><id>https://shreyasvinaya.github.io/folio/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Principles of Programming Languages notes</title><link href="https://shreyasvinaya.github.io/folio/blog/2023/principles-of-language/" rel="alternate" type="text/html" title="Principles of Programming Languages notes"/><published>2023-12-04T00:00:00+00:00</published><updated>2023-12-04T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2023/principles-of-language</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2023/principles-of-language/"><![CDATA[<h1 id="rust">Rust</h1> <h2 id="programming-concepts">Programming Concepts</h2> <h3 id="variables-and-mutability">Variables and Mutability</h3> <ul> <li>Variables are immutable in Rust</li> <li>Declare them as <code class="language-plaintext highlighter-rouge">mut</code> if you want to assign a new value to it</li> <li>Variables are locked to the scope <ul> <li>They can have diff values in diff scopes</li> </ul> <d-code block=""> let x = 5; { let x = 6; println!("The value of x is: {x}"); # The value of x is: 6 } println!("The value of x is: {x}"); # The value of x is: 5 </d-code> <ul> <li>This is called shadowing</li> </ul> </li> <li>The keyword <code class="language-plaintext highlighter-rouge">let</code> can be used to change type of the variable <d-code block=""> let spaces = " "; let spaces = spaces.len(); </d-code> </li> </ul> <h3 id="data-types">Data Types</h3> <ul> <li>Rust is a statically typed language, which means that it must know the types of all variables at compile time</li> <li>You need not explicitly declare the variable type during declaration</li> <li>Supports tuple destructuring like python</li> <li>Memory is protected, incorrect index access is not allowed</li> </ul> <h3 id="functions">Functions</h3> <ul> <li>Use <code class="language-plaintext highlighter-rouge">fn</code> keyword to declare a function</li> <li>Use <code class="language-plaintext highlighter-rouge">-&gt;</code> to specify return type</li> <li>functions dont return values, they return expressions</li> </ul> <h3 id="comments">Comments</h3> <ul> <li><code class="language-plaintext highlighter-rouge">//</code> for single line comments</li> <li><code class="language-plaintext highlighter-rouge">/* */</code> for multiline comments</li> </ul> <h3 id="control-flow">Control Flow</h3> <ul> <li><code class="language-plaintext highlighter-rouge">if</code> is an expression</li> <li><code class="language-plaintext highlighter-rouge">if</code> and <code class="language-plaintext highlighter-rouge">else</code> must return same type</li> <li><code class="language-plaintext highlighter-rouge">if</code> can be used in <code class="language-plaintext highlighter-rouge">let</code> statements</li> <li><code class="language-plaintext highlighter-rouge">loop</code> is an infinite loop</li> <li><code class="language-plaintext highlighter-rouge">while</code> is a conditional loop</li> </ul> <h2 id="ownership">Ownership</h2> <ul> <li>Central concept that the compiler uses to manage memory safely.</li> <li>Each value has a variable that is its owner.</li> <li>There can only be one owner at a time. When owner goes out of scope, value will be dropped (freed).</li> <li>Borrowing allows accessing data without taking ownership via references. References are immutable by default to avoid data races.</li> <li>Slices allow shared, mutable access to contiguous sequences like vectors.</li> </ul> <h3 id="what-is-ownership">What is Ownership?</h3> <ul> <li>Memory is managed through a system of ownership with a set of rules that the compiler checks at compile time</li> <li>Ownership rules: <ul> <li>Each value in Rust has a variable that’s called its owner</li> <li>There can only be one owner at a time</li> <li>When the owner goes out of scope, the value will be dropped</li> </ul> </li> <li>Rust never automatically creates “deep” copies of your data</li> <li>If you want to deeply copy the heap data of the String, not just the stack data, you can use a common method called <code class="language-plaintext highlighter-rouge">clone</code></li> <li>Stack only data: <ul> <li>fixed size</li> <li>popped off the stack when scope ends</li> </ul> </li> <li>Benefits of Ownership: <ul> <li>Prevents Memory Leaks</li> <li>Prevents Dangling pointers</li> <li>makes code more predictable</li> </ul> </li> </ul> <h3 id="references-and-borrowing">References and Borrowing</h3> <ul> <li>References allow you to refer to some value without taking ownership of it</li> <li>References are immutable by default but can be made mutable by using <code class="language-plaintext highlighter-rouge">&amp;mut</code></li> <li><code class="language-plaintext highlighter-rouge">&amp;</code> is used to create a reference</li> <li>We call having references as function parameters borrowing</li> <li>Borrowing is used to allow multiple readers or one writer of data at a time</li> <li>References must always be valid</li> <li>Valid references: <ul> <li>A reference to any value that is still in scope</li> <li>A reference to any value that has been moved to a new scope</li> </ul> </li> <li>Mutable references have one big restriction: if you have a mutable reference to a value, you can have no other references to that value.</li> <li>Dangling references are not allowed in Rust</li> <li>Dangerous references: <ul> <li>A reference to a value that has gone out of scope</li> <li>A reference to a value that has been freed</li> </ul> </li> </ul> <h3 id="slices">Slices</h3> <ul> <li>Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection</li> <li>Slice is a kind of reference, it does not have ownership</li> <li>we can slice strings, arrays, vectors</li> </ul> <p>The concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time.</p> <h2 id="enums-and-pattern-matching">Enums and Pattern Matching</h2> <ul> <li>Enums are a way of grouping related values so you can use them without spelling mistakes</li> <li>Enums can be used to create custom data types <h3 id="how-are-enums-different-from-struct">How are enums different from struct</h3> </li> <li>Enums are different from structs because you can only have one variant of an enum value at a time</li> <li>In an <code class="language-plaintext highlighter-rouge">enum</code>, each variant can have different types and amounts of associated data.</li> </ul> <h3 id="enums">Enums:</h3> <ul> <li>Enumerations can encode multiple variants for a type.</li> <li>Variants can have different data associated with them.</li> <li>Powerful pattern matching allows easy processing of different variants.</li> <li>Great for state machines, error handling, and sending messages between parts of a system.</li> </ul> <h2 id="packages-and-crates">Packages and Crates:</h2> <ul> <li>Crates are compilation units in Rust - can produce library or binary.</li> <li>Crates can be reused by importing them from other crates.</li> <li>Packages contain one or more crates for distribution.</li> <li>Module system provides private/public boundary within crate.</li> </ul> <h2 id="traits-and-generics">Traits and Generics:</h2> <ul> <li>Traits define shared behavior/interfaces that types can implement.</li> <li>Generics provide abstraction over types - functions/structs can work for multiple types.</li> <li>Combined, they provide flexibility to make code work with multiple types.</li> <li>Lifetimes explicitly annotate how references are valid.</li> </ul> <h2 id="error-handling">Error Handling:</h2> <ul> <li>Errors are core part of Rust philosophy. No exceptions.</li> <li>Enum error variants carry extra context.</li> <li>? operator handles propagating errors up call stack.</li> <li>Idiomatic to expect and handle errors rather than ignore.</li> </ul> <h2 id="notes">Notes</h2> <ol> <li>Getting Started -&gt; Ignore mostly</li> <li>Common programming concepts important</li> <li>Understanding ownership Slice type is important</li> <li>Using structs to structure related data <ol> <li>mildly important chapter. just skim through it</li> </ol> </li> <li>Enums and Pattern matching - VERY IMPORTANT</li> <li>Packaging, states and modules // VERY IMPORTANT - how is this different from c++</li> <li>Maps</li> <li>Error Handling Important //difference from Haskell</li> <li>Generic types, traits and Ifetime /MOST IMPORTANT CHAPTER</li> <li>Iterators and closures</li> <li>Smart pointers /IMPORTANT &gt; Exiension of ownership model</li> <li>Just skim over concurrency, not very imp</li> </ol>]]></content><author><name>Shreyas V</name></author><category term="notes"/><summary type="html"><![CDATA[notes for the course CS F301 Principles of Programming Languages]]></summary></entry><entry><title type="html">Jupyter Notebook</title><link href="https://shreyasvinaya.github.io/folio/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="Jupyter Notebook"/><published>2023-07-04T00:00:00+00:00</published><updated>2023-07-04T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2023/jupyter-notebook/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[&lt;!– — layout: post title: a post with jupyter notebook date: 2023-07-04 08:57:00-0400 description: an example of a blog post with jupyter notebook tags: formatting jupyter categories: sample-posts giscus_comments: true related_posts: false —]]></summary></entry><entry><title type="html">Custom Blockquotes</title><link href="https://shreyasvinaya.github.io/folio/blog/2023/custom-blockquotes/" rel="alternate" type="text/html" title="Custom Blockquotes"/><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2023/custom-blockquotes</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2023/custom-blockquotes/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[&lt;!– — layout: post title: a post with custom blockquotes date: 2023-05-12 15:53:00-0400 description: an example of a blog post with custom blockquotes tags: formatting blockquotes categories: sample-posts giscus_comments: true related_posts: true — This post shows how to add custom styles for blockquotes. Based on jekyll-gitbook implementation.]]></summary></entry><entry><title type="html">Audios</title><link href="https://shreyasvinaya.github.io/folio/blog/2023/audios/" rel="alternate" type="text/html" title="Audios"/><published>2023-04-25T00:00:00+00:00</published><updated>2023-04-25T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2023/audios</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2023/audios/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[&lt;!– — layout: post title: a post with audios date: 2023-04-25 10:25:00 description: this is what included audios could look like tags: formatting audios categories: sample-posts — This is an example post with audios. It supports local audio files.]]></summary></entry><entry><title type="html">Sidebar Table Of Contents</title><link href="https://shreyasvinaya.github.io/folio/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="Sidebar Table Of Contents"/><published>2023-04-25T00:00:00+00:00</published><updated>2023-04-25T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2023/sidebar-table-of-contents/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[&lt;!– — layout: post title: a post with table of contents on a sidebar date: 2023-04-25 10:14:00-0400 description: an example of a blog post with table of contents on a sidebar tags: formatting toc sidebar categories: sample-posts giscus_comments: true related_posts: false toc: sidebar: left — This post shows how to add a table of contents as a sidebar.]]></summary></entry><entry><title type="html">Videos</title><link href="https://shreyasvinaya.github.io/folio/blog/2023/videos/" rel="alternate" type="text/html" title="Videos"/><published>2023-04-24T00:00:00+00:00</published><updated>2023-04-24T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2023/videos</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2023/videos/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[&lt;!– — layout: post title: a post with videos date: 2023-04-24 21:01:00 description: this is what included videos could look like tags: formatting videos categories: sample-posts — This is an example post with videos. It supports local video files.]]></summary></entry><entry><title type="html">Tables</title><link href="https://shreyasvinaya.github.io/folio/blog/2023/tables/" rel="alternate" type="text/html" title="Tables"/><published>2023-03-21T00:00:00+00:00</published><updated>2023-03-21T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2023/tables</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2023/tables/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[&lt;!– — layout: post title: displaying beautiful tables with Bootstrap Tables date: 2023-03-20 14:37:00-0400 description: an example of how to use Bootstrap Tables tags: formatting tables categories: sample-posts giscus_comments: true related_posts: true datatable: true —]]></summary></entry><entry><title type="html">Table Of Contents</title><link href="https://shreyasvinaya.github.io/folio/blog/2023/table-of-contents/" rel="alternate" type="text/html" title="Table Of Contents"/><published>2023-03-20T00:00:00+00:00</published><updated>2023-03-20T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2023/table-of-contents</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2023/table-of-contents/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[&lt;!– — layout: post title: a post with table of contents date: 2023-03-20 11:59:00-0400 description: an example of a blog post with table of contents tags: formatting toc categories: sample-posts giscus_comments: true related_posts: false toc: beginning: true — This post shows how to add a table of contents in the beginning of the post.]]></summary></entry><entry><title type="html">Giscus Comments</title><link href="https://shreyasvinaya.github.io/folio/blog/2022/giscus-comments/" rel="alternate" type="text/html" title="Giscus Comments"/><published>2022-12-10T00:00:00+00:00</published><updated>2022-12-10T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2022/giscus-comments</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2022/giscus-comments/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Redirect</title><link href="https://shreyasvinaya.github.io/folio/blog/2022/redirect/" rel="alternate" type="text/html" title="Redirect"/><published>2022-02-01T00:00:00+00:00</published><updated>2022-02-01T00:00:00+00:00</updated><id>https://shreyasvinaya.github.io/folio/blog/2022/redirect</id><content type="html" xml:base="https://shreyasvinaya.github.io/folio/blog/2022/redirect/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[&lt;!– — layout: post title: a post with redirect date: 2022-02-01 17:39:00 description: you can also redirect to assets like pdf redirect: /assets/pdf/example_pdf.pdf —]]></summary></entry></feed>